---
import Link from "~/components/Link.astro";
import { twitter, author, defaultMeta, navigation } from "~/data/constants";
import "../styles/global.css";

interface Props {
  title?: string;
  description?: string;
  ogImage?: {
    src: string;
    alt: string;
  };
  pubDate?: Date;
  wide?: boolean;
}

const {
  title = defaultMeta.title,
  description = defaultMeta.description,
  ogImage = defaultMeta.ogImage,
  pubDate,
  wide = false,
} = Astro.props;

const ogImageURL = new URL(ogImage.src, Astro.site).href;
const canonicalURL = new URL(Astro.url).href;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <title>{title}</title>
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={ogImageURL} />
    <meta property="og:site_name" content={author} />
    <meta property="og:image:alt" content={ogImage.alt} />
    <meta property="og:locale" content="en_US" />
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta name="twitter:site" content={twitter} />
    <meta name="twitter:creator" content={twitter} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={ogImageURL} />
    <meta name="generator" content={Astro.generator} />
    <meta name="robots" content="follow, index" />
    <meta name="author" content={author} />
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
  </head>
  <body class="bg-white pb-20 font-mono antialiased dark:bg-zinc-900">
    <nav class="flex justify-end border-b border-zinc-300 dark:border-zinc-700">
      <ul class="flex items-center justify-start">
        {
          navigation.map((item) => (
            <li>
              <Link {...item} />
            </li>
          ))
        }
      </ul>
    </nav>
    <main
      class="mx-auto mt-14 px-6 text-zinc-500 lg:px-0 dark:text-zinc-400"
      class:list={{
        "max-w-4xl": wide,
        "max-w-3xl": !wide,
      }}
    >
      <slot />
    </main>
  </body>
</html>
